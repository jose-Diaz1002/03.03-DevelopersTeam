services:
  mysql_db:
    image: mysql:8.0
    container_name: mysql_container
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: virtual_escaperoom_db     # base que creas con el script, debe coincidir con el SQL
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # monta tu script para inicializar la BD
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot123"]
      interval: 5s
      timeout: 10s
      retries: 5

  mongo_db:
    image: mongo:latest
    container_name: mongo_container
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root_password
      MONGO_INITDB_DATABASE: escaperoom_logs_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand({ ping: 1 }).ok' | mongosh localhost:27017/escaperoom_logs_db --quiet"]
      interval: 5s
      timeout: 10s
      retries: 5

  java_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: java_app_container
    restart: unless-stopped
    depends_on:
      mysql_db:
        condition: service_healthy
      mongo_db:
        condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      MYSQL_HOST: mysql_db
      MYSQL_PORT: 3306
      MYSQL_DB: virtual_escaperoom_db
      MYSQL_USER: root
      MYSQL_PASS: root123
      MONGO_HOST: mongo_db
      MONGO_PORT: 27017
      MONGO_DB: escaperoom_logs_db

volumes:
  mysql_data:
  mongo_data:
